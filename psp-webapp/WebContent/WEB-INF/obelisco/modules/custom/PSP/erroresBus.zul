<?xml version="1.0" encoding="utf-8"?>
<?variable-resolver class="org.zkoss.zkplus.spring.DelegatingVariableResolver"?>
<?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit" arg0="./lstErrors"?>


<zk xmlns:n="http://www.zkoss.org/2005/zk/native"
	xmlns:h="http://www.w3.org/1999/xhtml">

	<zscript src="/WEB-INF/obelisco/commons/configureContext.zs" />
	<zscript src="/WEB-INF/obelisco/commons/configureSecurity.zs" />

	<zscript>
		<![CDATA[
	usuarioAEditar = null;
	errores = new ArrayList();
	response = new OpcErrorResponse();

	eventos = MongoLogger.getEventos();

	eventoSeleccionado = null;
]]>
	</zscript>

	<window id="lstErrors" title="Errores Bus" closable="true"
		height="100%" width="100%" border="normal" entityList="@{errores}"
		transaccion="@{transaccion}"
		use="com.obelisco.vista.zk.components.GenericWindowList">
		<caption image="/images/icons/24x24/window.png" />
		<style src="/css/estilo_zk.css" dynamic="true" />

		<panel width="100%" height="120px" border="normal">

			<panelchildren>

				<toolbar id="tool" mold="panel"
					use="com.obelisco.vista.zk.controls.Toolbar">
				</toolbar>


				<grid align="left">
					<columns>
						<column width="10%"></column>
						<column width="90%"></column>
					</columns>
					<rows>
						<row>
							<label value="Fecha" />
							<hbox>
								<label value="Desde"></label>
								<datebox id="dateDesde" width="200px"
									format="dd/MM/yyyy kk:mm:ss"
									constraint="no empty: No puede estar vacio"
									onCreate="self.value = new Date()">
								</datebox>
								<label value="Hasta"></label>
								<datebox id="dateHasta" width="200px"
									format="dd/MM/yyyy kk:mm:ss"
									constraint="no empty: No puede estar vacio"
									onCreate="self.value = new Date()">
								</datebox>

							</hbox>
						</row>
						<row>
							<label value="Tipo de Evento" />
							<combobox model="@{eventos}" id="cmbEventos"
								 width="300px" selectedValue="@{eventoSeleccionado}">
								<comboitem self="@{each=ev}" label="@{ev}" />
							</combobox>
						</row>
					</rows>
				</grid>




			</panelchildren>
		</panel>
		<panel title="Resultados de Búsqueda" border="normal"
			height="500px" width="100%" collapsible="true">
			<panelchildren>
				<listbox id="lstbox" rows="10" model="@{errores}"
					height="400px">
					<listhead sizable="true">
						<listheader width="30%" label="Causa" />
						<listheader label="Tipo Evento" width="10%" />
						<listheader width="10%" label="Fecha" />
						<listheader label="Descripción" width="50%" />
					</listhead>
					<listitem sclass="row-border item"
						self="@{each=e}">
						<listcell label="@{e.causa}" />
						<listcell label="@{e.tipoEvento}" />
						<listcell label="@{e.fecha}" />
						<listcell label="@{e.descripcion}" />
					</listitem>
				</listbox>
				<paging id="lstBoxPaging" visible="true"
					pageSize="20">
					<attribute name="onPaging">
						<![CDATA[
	{
		PAGE_SIZE = lstBoxPaging.getPageSize();

		pagno = lstBoxPaging.activePage;
		despl = pagno * PAGE_SIZE;
		//		if (despl == 0)
		//			despl = 1;
		te = "";
		if (cmbEventos.getSelectedItem() != null) {
			te = cmbEventos.getSelectedItem().getLabel();
			alert(te);
		}
		errores.clear();
		if (dateDesde != null && dateHasta != null) {
			if (!dateDesde.getValue().after(dateHasta.getValue())) {
				error = servicioMongo.findLogByPropertiesOnDemand(formatDate(dateDesde.getValue()),	formatDate(dateHasta.getValue()), te, pagno, PAGE_SIZE);
				if (error != null && error.errores.size() > 0) {
					errores = error.errores;
				}

			} else {
				alert("La fecha Desde no puede ser Mayor que Hasta");
			}

		} else {
			alert("Las fechas no pueden ser nulas!!!");
		}

		if (errores.size() == 0) {
			alert("No se encontraron resultados!!!");
		}
		binder.loadAll();

	}
]]>
					</attribute>
				</paging>

			</panelchildren>
		</panel>
		<zscript>
			<![CDATA[
	void doFindEntities() {
		te = "";
		
		if (cmbEventos.getSelectedItem() != null) {
			te = cmbEventos.getSelectedItem().getLabel();
		}
		errores.clear();
		if (dateDesde != null && dateHasta != null) {
			if (!dateDesde.getValue().after(dateHasta.getValue())) {

				cant = servicioMongo.countLogByProperties(
						formatDate(dateDesde.getValue()),
						formatDate(dateHasta.getValue()), te);
				//				cant = servicioMongo.countLogByProperties("2013-08-20 07:00:00","2013-08-26 13:00:00", te);
				lstBoxPaging.setTotalSize(Integer.valueOf(cant));
				error = servicioMongo.findLogByPropertiesOnDemand(
						formatDate(dateDesde.getValue()),
						formatDate(dateHasta.getValue()), te, 0, 20);
				if (error != null && error.errores.size() > 0) {
					errores = error.errores;
				}

			} else {
				alert("La fecha Desde no puede ser Mayor que Hasta");
			}

		} else {
			alert("Las fechas no pueden ser nulas!!!");
		}

		if (errores.size() == 0) {
			alert("No se encontraron resultados!!!");
		}
		binder.loadAll();
	}
	String formatDate(Date date) {
		java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat(
				"yyyy-MM-dd kk:mm:ss");
		return formatter.format(date);
	}
]]>
			
		</zscript>

	</window>

</zk>