<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:jersey="http://www.mulesoft.org/schema/mule/jersey" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:mongo="http://www.mulesoft.org/schema/mule/mongo" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/mongo http://www.mulesoft.org/schema/mule/mongo/2.0/mule-mongo.xsd
http://www.mulesoft.org/schema/mule/jersey http://www.mulesoft.org/schema/mule/jersey/current/mule-jersey.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">

	
	
	
    <quartz:connector name="Quartz-Connector" validateConnections="true" doc:name="Quartz">
        <quartz:factory-property key="rg.quartz.scheduler.instanceName" value="MuleScheduler1"/>
        <quartz:factory-property key="org.quartz.threadPool.class" value="org.quartz.simpl.SimpleThreadPool"/>
        <quartz:factory-property key="org.quartz.threadPool.threadCount" value="3"/>
        <quartz:factory-property key="org.quartz.scheduler.rmi.proxy" value="false"/>
        <quartz:factory-property key="org.quartz.scheduler.rmi.export" value="false"/>
        <quartz:factory-property key="org.quartz.jobStore.class" value="org.quartz.simpl.RAMJobStore"/>
    </quartz:connector>
    <spring:beans>
        <spring:bean id="mule-service" name="mule-service" class="org.home.psp.service.MulePspService">
            <spring:property name="pspService" ref="pspService"/>
        </spring:bean>
        <spring:bean id="pspService" name="pspService" class="org.home.psp.service.PspService">
            <spring:property name="opcDataRepo" ref="opcDataRepo"/>
        </spring:bean>
        <spring:import resource="classpath:spring-base.xml"/>
        <spring:bean id="opcDataRepo" name="opcDataRepo" class="org.home.psp.dao.OpcInfoRegisterDAO">
            <spring:property name="mongoTemplate" ref="mongoTemplate"/>
        </spring:bean>
        <spring:bean id="updateOpcService" name="updateOpcService" class="org.home.psp.service.MuleUpdateOpcInfoService">
            <spring:property name="pspService" ref="pspService"/>
        </spring:bean>
    </spring:beans>
    <mongo:config name="Mongo_DB" host="127.0.0.1" doc:name="Mongo DB" threadsAllowedToBlockForConnectionMultiplier="50" connectionsPerHost="100" maxWaitTime="2000" socketTimeout="10000">
        <mongo:connection-pooling-profile initialisationPolicy="INITIALISE_ALL" exhaustedAction="WHEN_EXHAUSTED_WAIT" maxActive="50"/>
        <reconnect count="5"/>
    </mongo:config>
    <custom-transformer class="org.home.psp.mule.transformers.JSONArrayToOpcInfoArray" name="Java" doc:name="Java"/>
    
 
    <flow name="OpcDataSimulator" doc:name="OpcDataSimulator">
        <quartz:inbound-endpoint jobName="poll-data-mongo-service" repeatInterval="10000" responseTimeout="10000" connector-ref="Quartz-Connector" doc:name="Quartz">
            <quartz:event-generator-job groupName="TEST" jobGroupName="TEST"/>
        </quartz:inbound-endpoint>
        <component doc:name="psp-service-mongodb">
            <spring-object bean="mule-service"/>
        </component>       	
    </flow> 
 
    <flow name="OpcDataSender" doc:name="OpcDataSender">
        <quartz:inbound-endpoint jobName="mongodb-query" repeatInterval="10000" responseTimeout="10000" doc:name="QuartzEnviarData">
            <quartz:event-generator-job groupName="mongo-query" jobGroupName="mongo-query"/>
        </quartz:inbound-endpoint>
        <mongo:find-objects config-ref="Mongo_DB" collection="opcInfoRegister" doc:name="MongoDB-Find-OPCRegisters" limit="100">                          
                                   
        </mongo:find-objects>
        <mongo:mongo-collection-to-json doc:name="MongoDB-Collection-to-Json-ED" ignoreBadInput="true"/>
        <transformer ref="Java" doc:name="JsonArrayToOpcInfoRegisterArray-ED"/>
        <collection-splitter doc:name="Collection-Splitter-ED" enableCorrelation="NEVER"/>
        <scripting:transformer doc:name="Groovy-ED">
            <scripting:script engine="Groovy"><![CDATA[def writer = new StringWriter() 
        def xml = new groovy.xml.MarkupBuilder(writer) 
        xml.opc() { 
          stationId(payload.stationId) 
          regValue(payload.regValue) 
          tagName(payload.tagName)
		  tagOpc(payload.tagOpc)
		  quality(payload.quality)
          hostModbusSlave(payload.hostModbusSlave)
          portModbusSlave(payload.portModbusSlave)
          reference(payload.reference)
          regType(payload.regType)
          timestamp(payload.timestamp)
        } 
        result = writer.toString();]]></scripting:script>
        </scripting:transformer>
        <http:outbound-endpoint exchange-pattern="request-response" host="localhost" port="9000" path="opc-info/save-opc-item" method="POST" encoding="UTF-8" mimeType="text/xml" doc:name="HTTP-ED"/>
        <object-to-string-transformer doc:name="Object to String"/>
        <vm:outbound-endpoint exchange-pattern="one-way" path="update-opc-endpoint" doc:name="VM"/>
      
      
    </flow>
    
    <flow name="ExposeOpcServiceRegion" doc:name="ExposeOpcServiceRegion">
        <http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="9000" doc:name="http-save-opc-endpoint" encoding="UTF-8"  path="opc-info" mimeType="text/xml"/>
        <jersey:resources doc:name="REST">
            <component class="org.home.psp.rest.OpcInfoRegisterRestfulService"/>
        </jersey:resources>
        
    </flow>
    <flow name="UpdateOpcItemLocalidad" doc:name="UpdateOpcItemLocalidad" processingStrategy="synchronous">
        <vm:inbound-endpoint exchange-pattern="one-way" path="update-opc-endpoint" doc:name="vm-update-opc-endpoint"/>
        <custom-transformer class="org.home.psp.mule.transformers.StringToXmlTransformer" doc:name="Java"/>
        <scripting:transformer doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[def xmlData = new XmlSlurper().parseText(payload)
org.home.psp.data.OpcInfoRegister o = new org.home.psp.data.OpcInfoRegister()
o.stationId = xmlData.stationId.text() as Long
o.regValue = xmlData.regValue
o.tagName = xmlData.tagName
o.hostModbusSlave = xmlData.hostModbusSlave
o.portModbusSlave = xmlData.portModbusSlave
o.timestamp = xmlData.timestamp
o.tagOpc = xmlData.tagOpc
o.reference = xmlData.reference
o.quality = xmlData.quality
o.regType = xmlData.regType
return o]]></scripting:script>
        </scripting:transformer>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <all doc:name="All">
            <mongo:save-object config-ref="Mongo_DB" collection="opcInfoRegisterHistorico" doc:name="Mongo DB"/>
            <processor-chain>
                <json:json-to-object-transformer returnClass="org.home.psp.data.OpcInfoRegister" doc:name="JSON to Object"/>
                <scripting:transformer doc:name="Groovy">
                    <scripting:script engine="Groovy"><![CDATA[Long stationId = payload.stationId as Long
return stationId]]></scripting:script>
                </scripting:transformer>
                <mongo:remove-objects config-ref="Mongo_DB" collection="opcInfoRegister" query-ref="#[string: {&quot;stationId&quot; : #[payload]}]" doc:name="Mongo DB"/>
            </processor-chain>
        </all>


    </flow>
   
    
</mule>
