<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns:smtps="http://www.mulesoft.org/schema/mule/smtps"
	xmlns:pop3="http://www.mulesoft.org/schema/mule/pop3" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:pop3s="http://www.mulesoft.org/schema/mule/pop3s" xmlns:imap="http://www.mulesoft.org/schema/mule/imap"
	xmlns:imaps="http://www.mulesoft.org/schema/mule/imaps" xmlns:email="http://www.mulesoft.org/schema/mule/email"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:https="http://www.mulesoft.org/schema/mule/https"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:jdbc="http://www.mulesoft.org/schema/mule/jdbc"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:management="http://www.mulesoft.org/schema/mule/management"
	xmlns:ognl="http://www.mulesoft.org/schema/mule/ognl" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz"
	xmlns:tcp="http://www.mulesoft.org/schema/mule/tcp" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:mule-xml="http://www.mulesoft.org/schema/mule/xml" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:mongo="http://www.mulesoft.org/schema/mule/mongo" xmlns:jersey="http://www.mulesoft.org/schema/mule/jersey"
	xsi:schemaLocation="
          http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
          http://www.mulesoft.org/schema/mule/smtps http://www.mulesoft.org/schema/mule/smtps/current/mule-smtps.xsd
          http://www.mulesoft.org/schema/mule/pop3 http://www.mulesoft.org/schema/mule/pop3/3.1/mule-pop3.xsd
          http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/3.3/mule-smtp.xsd
          http://www.mulesoft.org/schema/mule/pop3s http://www.mulesoft.org/schema/mule/pop3s/current/mule-pop3s.xsd
          http://www.mulesoft.org/schema/mule/imap http://www.mulesoft.org/schema/mule/imap/current/mule-imap.xsd
          http://www.mulesoft.org/schema/mule/imaps http://www.mulesoft.org/schema/mule/imaps/current/mule-imaps.xsd
          http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/3.2/mule-email.xsd
          http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/3.1/mule-file.xsd
          http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
          http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
          http://www.mulesoft.org/schema/mule/jdbc http://www.mulesoft.org/schema/mule/jdbc/3.2/mule-jdbc.xsd
          http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
          http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
          http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/3.3/mule-scripting.xsd
          http://www.mulesoft.org/schema/mule/management http://www.mulesoft.org/schema/mule/management/3.2/mule-management.xsd
          http://www.mulesoft.org/schema/mule/ognl http://www.mulesoft.org/schema/mule/ognl/current/mule-ognl.xsd
          http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
          http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
          http://www.mulesoft.org/schema/mule/tcp http://www.mulesoft.org/schema/mule/tcp/current/mule-tcp.xsd
          http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.1/mule-vm.xsd
          http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
          http://www.mulesoft.org/schema/mule/mongo http://www.mulesoft.org/schema/mule/mongo/2.0/mule-mongo.xsd
          http://www.mulesoft.org/schema/mule/jersey http://www.mulesoft.org/schema/mule/jersey/current/mule-jersey.xsd">
	
    
    <choice-exception-strategy name="Choice_Exception_Strategy">
		<catch-exception-strategy
			when="#[exception.causedBy(org.mule.api.routing.filter.FilterUnacceptedException)]"
			doc:name="Catch Exception Strategy">
			<scripting:transformer doc:name="Groovy">
				<scripting:script engine="Groovy"><![CDATA[
				    	import java.text.SimpleDateFormat;
		                import java.util.Date;
		                import java.text.DateFormat;
		                import java.util.Calendar;
		                import com.pdvsa.psp.model.xml.MongoLogger;
		                
						//org.mule.api.routing.filter.FilterUnacceptedException
						 DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		                String dateStr = dateFormat.format(Calendar.getInstance().getTime());
		                
		                Date currentTime = dateFormat.parse(dateStr);
		                
		                def log = new MongoLogger();
		                log.tipoEvento = MongoLogger.Evento.VALIDACION;	
						log.descripcion = "El XML Enviado no esta debidamente estructurado por favor Revise!";
						log.fecha = currentTime;
						log.causa = exception.cause;				
						
						return log;
						]]></scripting:script>
			</scripting:transformer>
			<component>
				<spring-object bean="mongoInsertLogComponent" />
			</component>
			<mule-xml:object-to-xml-transformer
				doc:name="Object to XML">
				<mule-xml:alias name="response"
					class="com.pdvsa.psp.model.xml.MongoLogger" />
			</mule-xml:object-to-xml-transformer>
		</catch-exception-strategy>
		<catch-exception-strategy when="#[exception.causedBy(java.net.ConnectException)]">
		    <scripting:transformer doc:name="Groovy">
				<scripting:script engine="Groovy"><![CDATA[
				    	import java.text.SimpleDateFormat;
		                import java.util.Date;
		                import java.text.DateFormat;
		                import java.util.Calendar;
		                import com.pdvsa.psp.model.xml.MongoLogger;
		                
						//org.mule.api.routing.filter.FilterUnacceptedException
						 DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		                String dateStr = dateFormat.format(Calendar.getInstance().getTime());
		                
		                Date currentTime = dateFormat.parse(dateStr);
		                
		                def log = new MongoLogger();
		                log.tipoEvento = MongoLogger.Evento.CONEXION;	
						log.descripcion = "SE HA INTENTADO ENVIAR SIN EXITO LA CANTIDAD: "+ flowVars['originalPayload'] + " ITEMS AL DESTINO: " + exception.event.message.getOutboundProperty("MULE_ENDPOINT");
						log.fecha = currentTime;
						log.causa = exception.cause;				
						
						return log;
						
						]]></scripting:script>
			</scripting:transformer>
			<all>
				<component>
					<spring-object bean="mongoInsertLogComponent" />
				</component>
				<vm:outbound-endpoint path="vm.error.transmision" />
			</all>
		</catch-exception-strategy>
		
		<catch-exception-strategy		
			doc:name="Catch Exception Strategy">
			<scripting:transformer doc:name="Groovy">
				<scripting:script engine="Groovy"><![CDATA[
				    	import java.text.SimpleDateFormat;
		                import java.util.Date;
		                import java.text.DateFormat;
		                import java.util.Calendar;
		                import com.pdvsa.psp.model.xml.MongoLogger;
		                
						//org.mule.api.routing.filter.FilterUnacceptedException
						 DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		                String dateStr = dateFormat.format(Calendar.getInstance().getTime());
		                
		                Date currentTime = dateFormat.parse(dateStr);
		                
		                def log = new MongoLogger();
		                log.tipoEvento = MongoLogger.Evento.DESCONOCIDO;	
						log.descripcion = "Ha Ocurrido un error desconocido en el Bus";
						log.fecha = currentTime;
						log.causa = exception.cause;				
						
						return log;
						]]></scripting:script>
			</scripting:transformer>
			<component>
				<spring-object bean="mongoInsertLogComponent" />
			</component>
			<mule-xml:object-to-xml-transformer	doc:name="Object to XML">
				<mule-xml:alias name="response"	class="com.pdvsa.psp.model.xml.MongoLogger" />
			</mule-xml:object-to-xml-transformer>
		</catch-exception-strategy>
	</choice-exception-strategy>
	 
    <flow name="ExposeOpcInfoPaisService" doc:name="ExposeOpcInfoPaisService">
		<http:inbound-endpoint exchange-pattern="request-response"
			host="${rest.host}" port="${rest.port}"  path="${rest.pathBase}/opc-info" doc:name="http-save-opc-endpoint" />
		<jersey:resources doc:name="REST">
			<component class="com.pdvsa.psp.mule.rest.OpcInfoRestService" />
		</jersey:resources>
		<object-to-string-transformer doc:name="Object to String" />
		
		<message-filter throwOnUnaccepted="true" doc:name="validation-filter">
			<filter ref="opc-request-schema-validation" />
		</message-filter>
		
		<mule-xml:dom-to-xml-transformer name="DomToXml" />
		
		<mule-xml:xml-to-object-transformer returnClass="com.pdvsa.psp.model.xml.OpcItemsTransfer" encoding="UTF-8" mimeType="text/xml">
		   <mule-xml:alias name="opcItemsTransfer" class="com.pdvsa.psp.model.xml.OpcItemsTransfer"/>
		   <mule-xml:alias name="opc" class="com.pdvsa.psp.model.xml.OpcInfoRegisterMongo"/>
		   <mule-xml:converter class="com.pdvsa.psp.converter.DateConverterMapper" />				    
		</mule-xml:xml-to-object-transformer>		
		<logger level="INFO" message="#[payload]"/>
		
		<all>
			<component>
	    		<spring-object bean="mongoInsertComponent"/>
			</component>
			<component>
			    <spring-object bean="storeTankOpcDataCache"/>
			</component>    
		</all>							
		
		<scripting:transformer doc:name="Groovy">
				<scripting:script engine="Groovy"><![CDATA[
				    	import java.text.SimpleDateFormat;
		                import java.util.Date;
		                import java.text.DateFormat;
		                import java.util.Calendar;
		                import com.pdvsa.psp.model.xml.MongoLogger;
		                
						//org.mule.api.routing.filter.FilterUnacceptedException
						 DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		                String dateStr = dateFormat.format(Calendar.getInstance().getTime());
		                
		                Date currentTime = dateFormat.parse(dateStr);
		                
		                def log = new MongoLogger();
		                log.tipoEvento = MongoLogger.TipoEvento.EXITO;	
						log.descripcion = "Se ha completado la transaccion de manera Exitosa";
						log.fecha = currentTime;				
						
						return log;
						]]></scripting:script>
			</scripting:transformer>
		<logger level="INFO" message="RETORNANDO RESPUESTA A LOCALIDAD" />
		
		<exception-strategy ref="Choice_Exception_Strategy"	doc:name="Catch_Exception_Strategy_DEFAULT" />
	</flow>
	
    <flow name="ItemsFromCacheFlow">
   	    <http:inbound-endpoint exchange-pattern="request-response" host="${rest.host}" port="${rest.port}" path="${rest.pathBase}/cache" doc:name="HTTP" method="GET"/>
		<jersey:resources doc:name="REST">
			<component>
			    <spring-object bean="itemsFromCache" />
			</component>
		</jersey:resources>
   	</flow>
	
	<flow name="ConsultarDatosOpcPentahoFlow" doc:name="ConsultarDatosOpcPentahoFlow">
		<description>Flow
			que Consulta Datos Opc en registro Historicos guardados en mongo, se
			presenta
			en dos modalidades,filtra por fecha desde-hasta y tambien por stationId
		</description>
		<http:inbound-endpoint exchange-pattern="request-response" host="${rest.host}" port="${rest.port}" path="${rest.pathBase}/query-vars" doc:name="HTTP" />
		<jersey:resources doc:name="REST">
			<component class="com.pdvsa.psp.mule.rest.QueryOpcDataMongo" />
		</jersey:resources>
		<object-to-string-transformer doc:name="Object to String" />
		
		<message-filter throwOnUnaccepted="true" doc:name="validation-filter">
			<filter ref="opc-request-schema-validation" />
		</message-filter>
		<mule-xml:dom-to-xml-transformer name="DomToXml" />
		
		<mule-xml:xml-to-object-transformer	returnClass="com.pdvsa.psp.model.xml.OpcInfoRegisterRequest" encoding="UTF-8" mimeType="text/xml" doc:name="XML to Object">
			<mule-xml:alias name="Opc.Request"	class="com.pdvsa.psp.model.xml.OpcInfoRegisterRequest" />
			<mule-xml:converter class="com.pdvsa.psp.converter.DateConverterMapper" />
		</mule-xml:xml-to-object-transformer>
		<!-- Modifique el Componente para que Almacene en Historic, como esta planteado leia de Cache -->
		<component>
	    	<spring-object bean="mongoFindComponent"/>
		</component>		
		<mule-xml:object-to-xml-transformer	encoding="UTF-8" mimeType="text/xml" doc:name="Object to XML">
			<mule-xml:alias name="Opc.Response"	class="com.pdvsa.psp.model.xml.OpcInfoRegisterListResponse" />
			<mule-xml:alias name="Opc.Item"	class="com.pdvsa.psp.model.xml.OpcInfoRegisterMongo" />
		</mule-xml:object-to-xml-transformer>
		<!-- Debe enviarse un xml con un tag de error para indicar que no hay conexion a la base de datos -->		
		
		<exception-strategy ref="Choice_Exception_Strategy"	doc:name="Catch_Exception_Strategy_DEFAULT" />
	</flow>
	
	
	
	<flow name="ConsultarDataPentahoGet">
	    <http:inbound-endpoint exchange-pattern="request-response" host="${rest.host}" port="${rest.port}" path="${rest.pathBase}/pentaho" doc:name="HTTP" method="GET"/>
		<jersey:resources doc:name="REST">
			<component>
			    <spring-object bean="mongoFindItemsPentahoRest" />
			</component>
		</jersey:resources>
	</flow>
	
	
	<flow name="ValidateTimeWithoutRecievingFromLocation">
		<quartz:inbound-endpoint jobName="validar-job" repeatInterval="6000000" responseTimeout="10000" doc:name="QuartzValidarRecepcion"	repeatCount="-1">
			<quartz:event-generator-job />
		</quartz:inbound-endpoint>
		<enricher  target="#[payload]">
				<flow-ref name="LookupRegionsSubflow" doc:name="LookupRegionsSubflow" />
		</enricher>
		<component>
			<spring-object bean="mongoFindLastTransactionRegion" />
		</component>
		<foreach>
			<set-variable variableName="region" value="#[payload.regionNombre]" />			
			<scripting:transformer doc:name="Groovy">
				<scripting:script engine="Groovy"><![CDATA[
	                import java.text.SimpleDateFormat;
	                import java.util.Date;
	                import java.text.DateFormat;
	                import java.util.Calendar;
	                import org.joda.time.Period;
	                import org.joda.time.PeriodType;
	                import org.joda.time.DurationFieldType;
	                import org.joda.time.DateTime;
	                
	                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	                String dateStr = dateFormat.format(Calendar.getInstance().getTime());
	                
	                def calendar1 = Calendar.getInstance();
	                def calendar2 = Calendar.getInstance();
	                calendar1.setTime(payload.timestamp);
	                
	                Date currentTime = dateFormat.parse(dateStr);
	                
	                calendar2.setTime(currentTime);
	                
	                def dateTime1 = new DateTime(calendar1.getTime());
	                
	                def dateTime2 = new DateTime(calendar2.getTime());
	                
	                DurationFieldType[] args = [DurationFieldType.minutes()] as DurationFieldType[];
	                
	                def type = PeriodType.forFields(args);
	                
	                def difference = new Period(dateTime1, dateTime2, type).getMinutes();
	                
	                payload = difference;
	                
					]]></scripting:script>
			</scripting:transformer>
		    <choice doc:name="Choice">
			<when expression="#[payload > app.registry.contador]">				
				<set-payload value="Han transcurrido #[payload] minutos desde que se recibio la ultima transmisión de DATOS Valida desde la localidad: #[flowVars['localidad']], por favor Consulte el Log del Sistema para más información"
					doc:name="Set Payload" />
				<logger level="INFO" message="#[app.registry.contador]" />
				<enricher source="#[payload]" target="#[flowVars['addresses']]">
					<flow-ref name="LookupEmailAddressesSubflow" doc:name="LookupEmailAddressesSubflow" />
				</enricher>
				<smtp:outbound-endpoint to="#[flowVars['addresses']]"
					user="${smtp.username}" password="${smtp.password}" host="${smtp.host}"
					port="${smtp.port}" subject="${email.subjectPrefix} N O T I F I C A C I O N"
					responseTimeout="10000" connector-ref="emailConnector" doc:name="SMTP" />
			</when>
			<otherwise>
				<logger level="INFO" message="NO CUMPLE CONDICION" />
			</otherwise>
		</choice>
		</foreach>
	</flow>
	
	<sub-flow name="LookupRegionsSubflow">
		<http:outbound-endpoint exchange-pattern="request-response"
			address="${soap.urlBase}/region" method="POST" doc:name="/psp/services/region" 
			<cxf:jaxws-client doc:name="getAllRegiones"
				operation="getAllRegiones" serviceClass="com.pdvsa.psp.service.IRegionService" />
		</http:outbound-endpoint>
	</sub-flow>
	
	<!-- ******* I M P O R T A N T E ******* -->
	<!-- Falta un flujo que determine si hay regiones que no esta transmitiendo, esto es una condicion de error a tomar en cuenta -->
	<!-- Generar notificacion via Correo Electronico -->
		
	
	<!-- 
	<flow name="ReplicationOpcConfigurationRestFlow" doc:name="ReplicationOpcConfigurationRestFlow">
		<http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="9000" doc:name="http-synchronize-vars-endpoint" encoding="UTF-8" path="replication-opc" mimeType="text/xml" />
		<jersey:resources doc:name="REST">
			<component>
			    <spring-object bean="opcReplicationRestService" />			    
			</component>
		</jersey:resources>
	</flow>
 	-->	
	

</mule>
